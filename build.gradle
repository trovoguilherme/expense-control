plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id "org.sonarqube" version "3.5.0.2730"
}

group = 'br.com.iug'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport

	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}

}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		csv.enabled true
		html.enabled true
	}
	finalizedBy jacocoTestCoverageVerification
}
//Caso queira que o minimo de cobertura seja bloqueado basta deixar a propriedade true
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = false
			limit {
				minimum = 0.45
			}
		}
	}
}

jacoco {
	toolVersion = "0.8.7"
}

//sonar {
//	properties {
//		property "sonar.login", "sqp_0fd22347e2eb85c3a9183e0874185dbdb1856d7c"
//		property "sonar.host.url", "http://localhost:9000"
//		property "sonar.projectKey", "expense-control"
//	}
//}